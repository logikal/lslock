#!/usr/bin/env ruby
require 'rubygems'
require 'bazaar'
require 'optparse'
require 'pp'
require 'fileutils'

options = {}
optparse  = OptionParser.new do |opts|
  opts.banner = 'Usage: lslock_test <arguments>'
  opts.separator ''
  opts.separator 'Optional Arguments:'
  options[:directory] = '/tmp/lslock-test'
  opts.on('-d', '--directory <path>',
          'the directory to create locks in, will be created if it does not exist') do |directory|
    options[:directory] = directory
  end
  options[:num_locks] = 10
  opts.on('-n', '--numlocks <integer>',
          'number of locks to create') do |num_locks|
    options[:num_locks] = num_locks.to_i
  end
  options[:seconds] = 30
  opts.on('-s', '--seconds <integer>',
          'number of seconds to hold locks for') do |seconds|
    options[:seconds] = seconds.to_i
  end
end
optparse.parse!

# safely create a new directory when we run this.
# We DON'T delete this after running. (in case you wanted to run more of these in parallel)
FileUtils.mkdir_p options[:directory] unless File.directory? options[:directory]

# create unique names so we don't get collisons later
# - probably overkill
files = []
options[:num_locks].times do
  files << Bazaar.heroku
end

# for each unique file, fork a process to hold
# an exclusive lock

files.each do |file|
  Process.detach(Process.fork{
    fullpath = "#{options[:directory]}/#{file}"
    # puts "creating file #{fullpath}"

    f = File.open(fullpath,
                  File::RDWR | File::CREAT, 0644)

    puts "#{Process.pid}  #{fullpath}"

    f.flock(File::LOCK_EX)
    # hold this open for a while, so we can inspect and run lslock
    sleep options[:seconds]
    f.close
    # clean up after ourselves, work is done.
    File.delete(fullpath)
  })
end
Process.waitall
